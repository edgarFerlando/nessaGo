package main

import (
	"encoding/json"
	"github.com/gorilla/mux"
	"log"
	"net/http"
)

type Person struct {
	ID        string   `json:"id,omitempty"`
	Firstname string   `json:"firstname,omitempty"`
	Lastname  string   `json:"lastname,omitempty"`
	Address   *Address `json:"address,omitempty"`
}

type Address struct {
	City  string `json:"city,omitempty"`
	State string `json:"state,omitempty"`
}

var people []Person

func GetPeopleEndPoint(w http.ResponseWriter, req *http.Request) {
	json.NewEncoder(w).Encode(people)

}
func GetPersonEndPoint(w http.ResponseWriter, req *http.Request) {
	vari := mux.Vars(req)
	for _, value := range people {
		if value.ID == vari["id"] {
			json.NewEncoder(w).Encode(value)
			return
		}
	}
	json.NewEncoder(w).Encode(&Person{})

}

func CreatePersonEndPoint(w http.ResponseWriter, req *http.Request) {
	vari := mux.Vars(req)
	var human Person
	_ = json.NewDecoder(req.Body).Decode(&human)
	human.ID = vari["id"]
	people = append(people, human)
	json.NewEncoder(w).Encode(people)

}
func DeletePersonEndPoint(w http.ResponseWriter, req *http.Request) {
	vari := mux.Vars(req)
	for i, item := range people {
		if item.ID == vari["id"] {
			people = append(people[:i], people[i+1:]...)
			break
		}
	}
	json.NewEncoder(w).Encode(people)
}

func main() {
	router := mux.NewRouter()
	people = append(people, Person{ID: "1", Firstname: "Nic", Lastname: "dang", Address: &Address{City: "Dublin", State: "California"}})
	people = append(people, Person{ID: "2", Firstname: "Portgaz", Lastname: "deby"})
	router.HandleFunc("/people", GetPeopleEndPoint).Methods("GET")
	router.HandleFunc("/people/{id}", GetPersonEndPoint).Methods("GET")
	router.HandleFunc("/people/{id}", CreatePersonEndPoint).Methods("POST")
	router.HandleFunc("/people/{id}", DeletePersonEndPoint).Methods("DELETE")
	log.Fatal(http.ListenAndServe(":1234", router))

}
